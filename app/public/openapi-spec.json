{
  "openapi": "3.0.0",
  "info": {
    "title": "CityCatalyst API",
    "version": "0.1.0"
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [],
  "paths": {
    "/api/v0/action-plans/{id}": {
      "get": {
        "summary": "Get action plan by ID",
        "description": "Retrieve a specific action plan by its ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Action plan ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Action plan details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Action plan not found"
          }
        }
      },
      "patch": {
        "summary": "Update action plan",
        "description": "Update an existing action plan with new data",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Action plan ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "planData": {
                    "type": "object"
                  },
                  "actionName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action plan updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Action plan not found"
          }
        }
      },
      "delete": {
        "summary": "Delete action plan",
        "description": "Delete an action plan by its ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Action plan ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Action plan deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Action plan not found"
          }
        }
      }
    },
    "/api/v0/action-plans": {
      "get": {
        "summary": "Get action plans",
        "description": "Retrieve action plans with optional filtering by inventory ID, language, and action ID",
        "parameters": [
          {
            "in": "query",
            "name": "inventoryId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by inventory ID"
          },
          {
            "in": "query",
            "name": "language",
            "schema": {
              "type": "string"
            },
            "description": "Filter by language"
          },
          {
            "in": "query",
            "name": "actionId",
            "schema": {
              "type": "string"
            },
            "description": "Filter by specific action ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of action plans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new action plan",
        "description": "Create a new action plan with the provided data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "actionId",
                  "inventoryId",
                  "cityLocode",
                  "actionName",
                  "language",
                  "planData"
                ],
                "properties": {
                  "actionId": {
                    "type": "string"
                  },
                  "inventoryId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "hiActionRankingId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "cityLocode": {
                    "type": "string"
                  },
                  "actionName": {
                    "type": "string"
                  },
                  "language": {
                    "type": "string"
                  },
                  "planData": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Action plan created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/admin/all-cities": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "List all cities with project and organization context.",
        "description": "Returns all cities in the system including basic project and organization fields. Requires an admin session to succeed; non-admin users receive an authorization error. Use this to audit cities and their parent project/organization mapping.",
        "responses": {
          "200": {
            "description": "List of cities wrapped in a data object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string"
                          },
                          "locode": {
                            "type": "string"
                          },
                          "project": {
                            "type": "object",
                            "properties": {
                              "organizationId": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "name": {
                                "type": "string"
                              },
                              "cityCountLimit": {
                                "type": "integer"
                              },
                              "organization": {
                                "type": "object",
                                "properties": {
                                  "organizationId": {
                                    "type": "string",
                                    "format": "uuid"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "contactEmail": {
                                    "type": "string",
                                    "format": "email"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "cityId": "c9d8a3c2-1234-4c1a-9de1-6f3f25a2b111",
                          "name": "Sample City",
                          "locode": "US-XXX",
                          "project": {
                            "organizationId": "b1c2d3e4-5678-4f90-aaaa-bbbbccccdddd",
                            "name": "Project Alpha",
                            "cityCountLimit": 25,
                            "organization": {
                              "organizationId": "0b6b1f1e-2222-4c33-9999-eeeeffff0000",
                              "name": "Org Name",
                              "contactEmail": "admin@example.org"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/api/v0/admin/bulk": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Create inventories in bulk for multiple cities and years.",
        "description": "Creates city records (if needed) and inventories for each provided LOCODE and year, and adds the specified users to those cities. Requires an admin session; non-admins receive an authorization error. Use this to seed projects quickly across many locations.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "cityLocodes",
                  "emails",
                  "years",
                  "scope",
                  "gwp",
                  "projectId"
                ],
                "properties": {
                  "cityLocodes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "emails": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email"
                    }
                  },
                  "years": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "scope": {
                    "type": "string",
                    "enum": [
                      "gpc_basic",
                      "gpc_basic_plus"
                    ]
                  },
                  "gwp": {
                    "type": "string",
                    "enum": [
                      "AR5",
                      "AR6"
                    ]
                  },
                  "projectId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation result with created inventory IDs and any errors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "locode": {
                            "type": "string"
                          },
                          "error": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "cityId": {
                                    "type": "string",
                                    "format": "uuid"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "success",
                                      "error",
                                      "warning"
                                    ]
                                  },
                                  "message": {
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "locode": {
                            "type": "string"
                          },
                          "result": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "format": "uuid"
                            }
                          },
                          "error": {
                            "type": "string",
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "errors": [
                        {
                          "locode": "US-AAA",
                          "error": "Population data incomplete for city US-AAA and inventory year 2022"
                        }
                      ],
                      "results": [
                        {
                          "locode": "US-BBB",
                          "result": [
                            "c9d8a3c2-1234-4c1a-9de1-6f3f25a2b111",
                            "a7b5c9d1-e8f2-4a6b-9c3d-8e1f2a5b6c7d"
                          ],
                          "error": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or users not found for invitation."
          },
          "404": {
            "description": "City name lookup failed or related entity missing."
          }
        }
      }
    },
    "/api/v0/admin/connect-sources": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Connect prioritized data sources to many inventories.",
        "description": "Finds inventories for the given user and cities/years and attempts to connect the best available data source per GPC reference number. Requires an admin session; non-admins receive an authorization error. Use this to auto-populate inventories with external datasets.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userEmail",
                  "cityLocodes",
                  "years"
                ],
                "properties": {
                  "userEmail": {
                    "type": "string",
                    "format": "email"
                  },
                  "cityLocodes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "years": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation result with any connection errors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "locode": {
                            "type": "string"
                          },
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "errors": [
                        {
                          "locode": "US-CCC",
                          "error": "no-data-source-available-for-gpc-reference-number"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "404": {
            "description": "Related inventory or city not found."
          }
        }
      }
    },
    "/api/v0/admin/mark-cities-public": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Mark cities as public by making their inventories public for a specific project.",
        "description": "Updates all inventories for cities in a specific project to have isPublic=true, effectively making those cities public. Requires admin or OEF admin session and projectId in request body. Cities are considered public when they have at least one public inventory.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "projectId"
                ],
                "properties": {
                  "projectId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The project ID for which to mark cities as public"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully marked cities in the project as public.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "message": "Successfully marked all cities in project as public"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid project ID or project not found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden - requires admin or OEF admin permissions."
          }
        }
      }
    },
    "/api/v0/admin/update-inventories": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Update inventories’ population context for many cities/years.",
        "description": "Regenerates population and location context for inventories that match the provided cities and years, and optionally reassigns them to a project. Requires an admin session; non-admins receive an authorization error. Use this to refresh inventory context data in bulk.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userEmail",
                  "cityLocodes",
                  "years",
                  "projectId"
                ],
                "properties": {
                  "userEmail": {
                    "type": "string",
                    "format": "email"
                  },
                  "cityLocodes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "years": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "projectId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Array of errors (empty if all updates succeeded).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "locode": {
                        "type": "string"
                      },
                      "error": {
                        "type": "string"
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": [
                      {
                        "locode": "US-DDD",
                        "error": "Population data incomplete for city US-DDD and inventory year 2021"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "404": {
            "description": "City or inventory not found."
          }
        }
      }
    },
    "/api/v0/assistants/files/{fileId}": {
      "get": {
        "tags": [
          "Assistants Files"
        ],
        "summary": "Retrieve metadata for an Assistant file by ID.",
        "description": "Fetches an OpenAI File object by its ID using the Assistant client. Requires a signed-in user; no elevated role is needed. Use this to inspect file metadata referenced by a thread.",
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "OpenAI File ID"
                        },
                        "object": {
                          "type": "string",
                          "description": "Object type, always \"file\""
                        },
                        "filename": {
                          "type": "string",
                          "description": "Original filename"
                        },
                        "bytes": {
                          "type": "number",
                          "description": "File size in bytes"
                        },
                        "created_at": {
                          "type": "number",
                          "description": "Unix timestamp of file creation"
                        },
                        "purpose": {
                          "type": "string",
                          "enum": [
                            "assistants",
                            "vision",
                            "fine-tune"
                          ],
                          "description": "Purpose of the file"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "uploaded",
                            "processed",
                            "error"
                          ],
                          "description": "File processing status"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "file": {
                        "id": "file_abc123",
                        "object": "file",
                        "filename": "document.pdf",
                        "bytes": 1024,
                        "created_at": 1699061776,
                        "purpose": "assistants",
                        "status": "processed"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/assistants": {
      "post": {
        "tags": [
          "Assistants"
        ],
        "summary": "Create a configured Assistant instance for the application.",
        "description": "Creates a configured Assistant instance for the application with file search resources. Requires an admin session. Returns an OpenAI Assistant ID that can be used for climate-related queries and document analysis.",
        "responses": {
          "200": {
            "description": "Assistant created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "assistantId": {
                      "type": "string",
                      "description": "OpenAI Assistant ID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - requires admin role."
          },
          "405": {
            "description": "Method not allowed."
          },
          "501": {
            "description": "Not implemented."
          }
        }
      }
    },
    "/api/v0/assistants/threads/{inventory}/retrieve": {
      "post": {
        "tags": [
          "Assistants Threads"
        ],
        "summary": "Retrieve details for an existing assistant thread.",
        "description": "Looks up a thread by ID using the Assistant API. Requires a signed-in user with access to the referenced inventory. Use this to restore a thread session on page reload.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "threadId"
                ],
                "properties": {
                  "threadId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thread payload from provider.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "thread": {
                      "type": "object",
                      "properties": {
                        "threadId": {
                          "type": "string",
                          "description": "OpenAI Thread ID"
                        },
                        "created_at": {
                          "type": "number",
                          "description": "Unix timestamp of thread creation"
                        },
                        "updated_at": {
                          "type": "number",
                          "description": "Unix timestamp of last thread update"
                        },
                        "metadata": {
                          "type": "object",
                          "additionalProperties": true,
                          "description": "Thread metadata"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "thread": {
                        "id": "thread_abc123",
                        "object": "thread"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to retrieve thread."
          }
        }
      }
    },
    "/api/v0/assistants/threads/{inventory}": {
      "post": {
        "tags": [
          "Assistants Threads"
        ],
        "summary": "Create a new assistant thread for a specific inventory.",
        "description": "Creates a thread and seeds it with inventory context plus an initial message. Requires a signed-in user with access to the target inventory; access is enforced via inventory permissions. Use this to start a chat session tied to a given inventory.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "content"
                ],
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thread identifier.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "threadId": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "threadId": "thread_abc123"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/assistants/threads/actions": {
      "post": {
        "tags": [
          "Assistants Threads"
        ],
        "summary": "Submit tool outputs for an in‑flight run and stream updated events.",
        "description": "Provides tool call outputs to a running thread and resumes streaming of events. Requires a signed-in user with access to the underlying inventory/thread. The response is a streamed sequence of events, not a JSON object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "threadId",
                  "runId",
                  "toolCallOutputs"
                ],
                "properties": {
                  "threadId": {
                    "type": "string"
                  },
                  "runId": {
                    "type": "string"
                  },
                  "toolCallOutputs": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server-sent stream of Assistant events.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "example": {
                    "value": "event: tool.outputs.submitted\ndata: {\"status\":\"ok\"}\n"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/assistants/threads/export": {
      "post": {
        "tags": [
          "Assistants Threads"
        ],
        "summary": "Save an assistant thread reference in the database.",
        "description": "Persists the external Assistant thread ID associated with the configured Assistant. Requires a signed-in user (standard user is sufficient). Use this to keep a record of threads created via the Assistant API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "threadId"
                ],
                "properties": {
                  "threadId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created database row wrapped in a data object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "assistantThreadId": {
                          "type": "string"
                        },
                        "assistantId": {
                          "type": "string",
                          "description": "OpenAI Assistant ID to export from"
                        },
                        "threadId": {
                          "type": "string",
                          "description": "OpenAI Thread ID to export messages from"
                        },
                        "format": {
                          "type": "string",
                          "enum": [
                            "json",
                            "csv",
                            "pdf"
                          ],
                          "default": "json"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": {
                        "assistantThreadId": "thread_abc123",
                        "assistantId": "asst_123"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid threadId provided."
          },
          "500": {
            "description": "Server error."
          }
        }
      }
    },
    "/api/v0/assistants/threads/messages": {
      "post": {
        "tags": [
          "Assistants Threads"
        ],
        "summary": "Append a user message to a thread and stream the run output.",
        "description": "Adds a message to an existing thread and starts a run that streams incremental events (tool calls, deltas, completions). Requires a signed-in user who owns or can access the thread’s inventory context. The response is a streamed sequence of events, not a JSON object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "threadId",
                  "content"
                ],
                "properties": {
                  "threadId": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server-sent stream of Assistant events.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "example": {
                    "value": "event: message.delta\ndata: {\"delta\":\"Hello\"}\n"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/auth/code": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Issue a short‑lived OAuth authorization code for the current user.",
        "description": "Validates the OAuth client credentials and CSRF token, then generates a signed JWT authorization code using PKCE for enhanced security. The code is valid for 5 minutes and must be exchanged for tokens immediately. Requires an authenticated user session and the OAUTH_ENABLED feature flag. Use this endpoint as part of the OAuth 2.0 Authorization Code flow before exchanging the code for access tokens at `/api/v0/token`.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "clientId",
                  "redirectUri",
                  "codeChallenge",
                  "scope",
                  "csrfToken"
                ],
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "OAuth client identifier registered in the system"
                  },
                  "redirectUri": {
                    "type": "string",
                    "format": "uri",
                    "description": "The callback URL where the authorization code will be sent"
                  },
                  "codeChallenge": {
                    "type": "string",
                    "description": "PKCE code challenge for enhanced security (base64url encoded SHA256 hash)"
                  },
                  "scope": {
                    "type": "string",
                    "description": "Space-separated list of OAuth scopes requested by the client"
                  },
                  "csrfToken": {
                    "type": "string",
                    "description": "CSRF protection token obtained from the session"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code wrapped in a data object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Short-lived JWT authorization code that expires in 5 minutes"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": {
                        "code": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid client ID, redirect URI mismatch, or CSRF token validation failure."
          },
          "401": {
            "description": "User is not authenticated or lacks valid session."
          },
          "500": {
            "description": "OAuth feature not enabled, missing configuration, or internal server error."
          }
        }
      }
    },
    "/api/v0/auth/delete": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Delete the authenticated user’s account.",
        "description": "Removes the user record for the currently signed‑in session. Requires a signed‑in user; requests without a session return 401. Use with caution as this operation is irreversible.",
        "responses": {
          "200": {
            "description": "Account successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the account deletion was successful"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User must be authenticated to delete account."
          },
          "404": {
            "description": "User email not found in session or user does not exist."
          },
          "500": {
            "description": "Internal server error during account deletion."
          }
        }
      }
    },
    "/api/v0/auth/forgot": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Request a password reset email for a user account.",
        "description": "Generates a short‑lived JWT reset token (valid for 1 hour) and sends a password reset email if the user exists. For security, this endpoint always returns 200 regardless of whether the email exists to prevent account enumeration. Requires proper email configuration and RESET_TOKEN_SECRET environment variable.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address of the account to reset password for"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset request acknowledged. Check email if account exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example": {
                    "value": {}
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid email format or validation error."
          },
          "500": {
            "description": "Configuration error, email service unavailable, or internal server error."
          }
        }
      }
    },
    "/api/v0/auth/password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Set a new password using a valid reset token.",
        "description": "Verifies the provided reset token and updates the user’s password. No authentication is required for this flow, only a valid token. Returns 200 with an empty object on success.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newPassword",
                  "resetToken"
                ],
                "properties": {
                  "newPassword": {
                    "type": "string"
                  },
                  "resetToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Empty body on success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example": {
                    "value": {}
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired token."
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Configuration error."
          }
        }
      }
    },
    "/api/v0/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create a new user account and send a welcome email.",
        "description": "Registers a user with name, email, password, and preferred language and optionally associates them to an inventory’s city. Public endpoint; no prior authentication required. Returns a minimal user object on success.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password",
                  "confirmPassword",
                  "acceptTerms",
                  "preferredLanguage"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Full name of the user",
                    "minLength": 4
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Valid email address for account creation and notifications"
                  },
                  "password": {
                    "type": "string",
                    "description": "Must be at least 4 characters with at least one lowercase letter, one uppercase letter, and one number",
                    "minLength": 4
                  },
                  "confirmPassword": {
                    "type": "string",
                    "description": "Must match the password field exactly"
                  },
                  "acceptTerms": {
                    "type": "boolean",
                    "description": "Must be true to accept the terms and conditions"
                  },
                  "inventory": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional inventory ID to associate the user with a city's inventory"
                  },
                  "preferredLanguage": {
                    "type": "string",
                    "enum": [
                      "en",
                      "es",
                      "pt",
                      "de",
                      "fr"
                    ],
                    "description": "User's preferred language for the application"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Minimal user object wrapped in user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "userId": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique identifier for the user"
                        },
                        "name": {
                          "type": "string",
                          "description": "Full name of the user"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "User's email address"
                        },
                        "role": {
                          "type": "string",
                          "description": "User's role in the system"
                        },
                        "preferredLanguage": {
                          "type": "string",
                          "description": "User's preferred language setting"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "user": {
                        "userId": "7c0c4b9a-7b60-4f63-b4cc-7b4bcae6a111",
                        "name": "Jane Doe",
                        "email": "jane@example.com",
                        "role": "user",
                        "preferredLanguage": "en"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email could not be sent or invalid input."
          },
          "422": {
            "description": "Validation error - invalid or missing required fields."
          },
          "500": {
            "description": "Internal server error during user creation or email processing."
          }
        }
      }
    },
    "/api/v0/auth/role": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Update a user’s role (admin only).",
        "description": "Sets the role for the target user to either admin or user. Requires an admin session; non‑admins receive 403. Returns a simple success flag on completion.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "role"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address of the user whose role will be changed"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "user",
                      "admin"
                    ],
                    "description": "New role to assign to the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User role successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the role change was successful"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User already has the specified role or invalid role value."
          },
          "403": {
            "description": "Only admin users can change roles."
          },
          "404": {
            "description": "Target user not found."
          },
          "422": {
            "description": "Validation error - invalid email format or missing required fields."
          },
          "500": {
            "description": "Internal server error during role update."
          }
        }
      }
    },
    "/api/v0/auth/update-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Change the current user’s password.",
        "description": "Validates the current password and sets a new one for the authenticated user. Requires a signed‑in session; non‑authenticated requests fail with 401/404. Returns a success flag indicating if the update persisted.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "currentPassword",
                  "confirmPassword"
                ],
                "properties": {
                  "currentPassword": {
                    "type": "string",
                    "description": "User's current password for verification",
                    "minLength": 4,
                    "maxLength": 64
                  },
                  "confirmPassword": {
                    "type": "string",
                    "description": "New password to set (must be at least 4 characters with one lowercase letter, one uppercase letter, and one number)",
                    "minLength": 4,
                    "maxLength": 64
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the password update was successful"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Current password is incorrect or new password doesn't meet complexity requirements."
          },
          "401": {
            "description": "User is not authenticated or session has expired."
          },
          "404": {
            "description": "User not found or session expired."
          },
          "422": {
            "description": "Validation error - invalid password format or missing required fields."
          },
          "500": {
            "description": "Internal server error during password update."
          }
        }
      }
    },
    "/api/v0/auth/verify": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Create a verification token for the current user.",
        "description": "Issues a JWT verification token (valid for 1 hour) for the authenticated user. The token is used to verify the user's identity without exposing sensitive session data. Requires an authenticated session with a valid email. Use the returned token with the POST route to verify passwords without requiring re-authentication.",
        "responses": {
          "200": {
            "description": "Token wrapped in a JSON object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "verificationToken": {
                      "type": "string",
                      "description": "JWT verification token valid for 1 hour"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "verificationToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User email missing in session or invalid session state."
          },
          "401": {
            "description": "User is not authenticated."
          },
          "404": {
            "description": "User not found in database."
          },
          "500": {
            "description": "Configuration error or missing VERIFICATION_TOKEN_SECRET environment variable."
          }
        }
      },
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Check if a password matches the user referenced by a token.",
        "description": "Verifies the supplied password against the user identified by the JWT verification token. This endpoint doesn't require authentication - the token serves as proof of identity. Useful for password verification in scenarios where you want to avoid exposing session cookies or API keys. Returns true if the password matches the user's stored password hash.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password",
                  "token"
                ],
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "Password to verify against the user identified by the token",
                    "minLength": 4
                  },
                  "token": {
                    "type": "string",
                    "description": "JWT verification token obtained from the GET endpoint"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password verification result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comparePassword": {
                      "type": "boolean",
                      "description": "True if the provided password matches the user's stored password"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "comparePassword": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired JWT verification token."
          },
          "404": {
            "description": "User referenced by token not found in database."
          },
          "422": {
            "description": "Validation error - invalid password format or missing required fields."
          },
          "500": {
            "description": "Configuration error or missing VERIFICATION_TOKEN_SECRET environment variable."
          }
        }
      }
    },
    "/api/v0/bulk-locations": {
      "get": {
        "tags": [
          "Bulk Locations"
        ],
        "summary": "List approximate lat/lng for accessible cities by organization or project.",
        "description": "Returns a list of city location center points computed from city boundary polygon data. For each city, the center latitude and longitude are calculated as the midpoint of the bounding box. Requires an authenticated user with proper access permissions to the specified organization or project. Cities with missing locode or boundary data will return error entries instead of location data. This endpoint is useful for mapping applications that need approximate city centers.",
        "parameters": [
          {
            "in": "query",
            "name": "organizationId",
            "required": false,
            "description": "UUID of the organization to get cities for. Either organizationId or projectId must be provided.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "projectId",
            "required": false,
            "description": "UUID of the project to get cities for. Either organizationId or projectId must be provided.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of city location results wrapped in data. Each item is either a successful location object with lat/lng coordinates or an error object for cities that failed to load.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "Successful location data for a city",
                            "properties": {
                              "locode": {
                                "type": "string",
                                "description": "City locode identifier"
                              },
                              "name": {
                                "type": "string",
                                "description": "City name"
                              },
                              "country": {
                                "type": "string",
                                "description": "Country name"
                              },
                              "latitude": {
                                "type": "number",
                                "description": "Center latitude calculated from city boundary"
                              },
                              "longitude": {
                                "type": "number",
                                "description": "Center longitude calculated from city boundary"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Error entry for a city that failed to load",
                            "properties": {
                              "error": {
                                "type": "string",
                                "description": "Error type (LOCODE_MISSING or FAILED_TO_LOAD_CITY_BOUNDARY)",
                                "enum": [
                                  "LOCODE_MISSING",
                                  "FAILED_TO_LOAD_CITY_BOUNDARY"
                                ]
                              },
                              "cityId": {
                                "type": "string",
                                "format": "uuid",
                                "description": "UUID of the city that failed to load"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "locode": "US-NYC",
                          "name": "New York",
                          "country": "United States",
                          "latitude": 40.7128,
                          "longitude": -74.006
                        },
                        {
                          "error": "FAILED_TO_LOAD_CITY_BOUNDARY",
                          "cityId": "e1f2a3b4-0000-0000-0000-000000000000"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Either organizationId or projectId must be provided as query parameter."
          },
          "401": {
            "description": "User must be authenticated to access this endpoint."
          },
          "403": {
            "description": "User does not have access to the specified organization or project."
          },
          "404": {
            "description": "No cities found for the specified organization or project."
          },
          "500": {
            "description": "Internal server error during city lookup or boundary data processing."
          }
        }
      }
    },
    "/api/v0/chat/{inventory}": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Stream chat responses grounded in a specific inventory context.",
        "description": "Uses either OpenAI or HuggingFace models to generate a streamed response, prepending inventory context derived from the city and its population data. Requires a signed‑in user with access to the target inventory; unauthorized users receive 401/404. The response is a text/event-stream of incremental tokens/events, not a JSON object.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "messages"
                ],
                "properties": {
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": [
                            "function",
                            "data",
                            "system",
                            "user",
                            "assistant",
                            "tool"
                          ]
                        },
                        "content": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server-sent stream of chat tokens/events.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "example": {
                    "value": "event: completion.delta\ndata: {\"delta\":\"Hello\"}\n"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or no access to inventory."
          },
          "404": {
            "description": "Inventory not found."
          }
        }
      }
    },
    "/api/v0/check/health": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Report service health and database connectivity.",
        "description": "Public endpoint that validates database connectivity and returns the service version. Does not require authentication. Use it for readiness/health probes in deployments.",
        "responses": {
          "200": {
            "description": "Healthy status and version.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "message": "healthy",
                      "version": "0.99.0-dev.0"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Database connection failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "message": "database-connection-failed",
                      "version": "0.99.0-dev.0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/check/liveness": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Report liveness status and version.",
        "description": "Public endpoint that reports if the service process is responsive and includes the version string. Does not require authentication. Use it for container/process liveness checks.",
        "responses": {
          "200": {
            "description": "Alive status and version.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "message": "alive",
                      "version": "0.99.0-dev.0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/city/{city}/boundary": {
      "get": {
        "tags": [
          "City"
        ],
        "summary": "Get city boundary data",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "City location code (locode), not a UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "City boundary returned."
          },
          "500": {
            "description": "Failed to fetch boundary."
          }
        }
      }
    },
    "/api/v0/city/{city}/file/{file}/download-file": {
      "get": {
        "tags": [
          "City Files"
        ],
        "summary": "Download a city file by ID",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Binary file stream."
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/api/v0/city/{city}/file/{file}": {
      "get": {
        "tags": [
          "City Files"
        ],
        "summary": "Get a single uploaded city file by ID.",
        "description": "Returns the stored file metadata for the given city and file ID. Requires a signed‑in user with access to the city. Response is wrapped in '{' data '}'.",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File metadata wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "fileId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "fileName": {
                          "type": "string"
                        },
                        "size": {
                          "type": "number"
                        },
                        "fileType": {
                          "type": "string"
                        },
                        "uploadDate": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "content": {
                          "type": "string",
                          "description": "File content as base64 or URL"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "City Files"
        ],
        "summary": "Delete an uploaded city file by ID.",
        "description": "Removes the file metadata record. Requires a signed‑in user with access to the city. Returns the deleted record in { data } and a deleted flag.",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted file wrapped in data with deleted flag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    },
                    "deleted": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/city/{city}/file": {
      "get": {
        "tags": [
          "City Files"
        ],
        "summary": "List uploaded files for a city.",
        "description": "Returns metadata for files users have uploaded to the specified city, including derived size/type info. Requires a signed‑in session; unauthorized users receive 401. Response is wrapped in data object.",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Files wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "userId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "cityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fileReference": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string",
                            "format": "uri"
                          },
                          "sector": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "gpcRefNo": {
                            "type": "string"
                          },
                          "lastUpdated": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "file": {
                            "type": "object",
                            "properties": {
                              "fileName": {
                                "type": "string"
                              },
                              "size": {
                                "type": "integer"
                              },
                              "fileType": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "City Files"
        ],
        "summary": "Upload a file for a city to attach to inventory data.",
        "description": "Accepts multipart/form-data to upload and register a file with sector/scopes metadata. Requires a signed‑in session and the UPLOAD_OWN_DATA_ENABLED feature flag. Returns the normalized file metadata in data object.",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "format": "binary"
                  },
                  "inventoryId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "sector": {
                    "type": "string"
                  },
                  "subsectors": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "string"
                  },
                  "fileReference": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "status": {
                    "type": "string"
                  },
                  "gpcRefNo": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Uploaded file metadata wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "userId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "cityId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "fileReference": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri"
                        },
                        "sector": {
                          "type": "string"
                        },
                        "subsectors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "scopes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "fileName": {
                          "type": "string"
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string"
                        },
                        "gpcRefNo": {
                          "type": "string"
                        },
                        "file": {
                          "type": "object",
                          "properties": {
                            "fileName": {
                              "type": "string"
                            },
                            "size": {
                              "type": "integer"
                            },
                            "fileType": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or payload."
          },
          "503": {
            "description": "Feature disabled."
          }
        }
      }
    },
    "/api/v0/city/{city}/inventory": {
      "post": {
        "tags": [
          "City Inventory"
        ],
        "summary": "Create a new inventory for a city.",
        "description": "Creates a new inventory for the specified city. Requires appropriate permissions.",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "year": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created inventory wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "inventoryId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "year": {
                          "type": "number"
                        },
                        "cityId": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "didExistAlready": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "City Inventory"
        ],
        "summary": "List inventories for a city the user can access.",
        "description": "Returns all inventories for the given city after access is validated. Requires a signed‑in user with access to the city. Response is wrapped in data object.",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventories wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "inventoryId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "year": {
                            "type": "number"
                          },
                          "cityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "projectId": {
                            "type": "string",
                            "format": "uuid",
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/city/{city}/modules/{module}/access": {
      "get": {
        "tags": [
          "City Modules"
        ],
        "summary": "Check if user has access to a specific module for a city",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "module",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Access flag returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "hasAccess": {
                          "type": "boolean",
                          "description": "Whether the user has access to the specified module"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/city/{city}/modules/ccra/dashboard": {
      "get": {
        "tags": [
          "City Modules"
        ],
        "summary": "Get Climate Change Risk Assessment (CCRA) dashboard data for a city inventory",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "inventoryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CCRA dashboard data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "CCRA dashboard data"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "cityId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "inventoryId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "year": {
                          "type": "integer"
                        },
                        "moduleId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Inventory does not belong to city."
          },
          "404": {
            "description": "Inventory not found."
          }
        }
      }
    },
    "/api/v0/city/{city}/modules/ghgi/dashboard": {
      "get": {
        "tags": [
          "City Modules"
        ],
        "summary": "Get Greenhouse Gas Inventory (GHGI) dashboard data for a city inventory",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "inventoryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GHGI dashboard data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "GHGI dashboard data"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "cityId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "inventoryId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "year": {
                          "type": "integer"
                        },
                        "moduleId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Inventory does not belong to city."
          },
          "404": {
            "description": "Inventory not found."
          }
        }
      }
    },
    "/api/v0/city/{city}/modules/hiap/dashboard": {
      "get": {
        "tags": [
          "City Modules"
        ],
        "summary": "Get Heatwave Impact Assessment Plan (HIAP) dashboard data for a city inventory",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "inventoryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "lng",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Language code for localized content, defaults to en"
          },
          {
            "in": "query",
            "name": "ignoreExisting",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Whether to ignore existing HIAP data and recalculate"
          }
        ],
        "responses": {
          "200": {
            "description": "HIAP dashboard data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "HIAP dashboard data"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "cityId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "inventoryId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "year": {
                          "type": "integer"
                        },
                        "moduleId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Inventory does not belong to city."
          },
          "404": {
            "description": "Inventory not found."
          }
        }
      }
    },
    "/api/v0/city/{city}/organization": {
      "get": {
        "tags": [
          "City Organization"
        ],
        "summary": "Get organization details and branding for a city.",
        "description": "Retrieves organization information including identifier, name, logo URL, active status, and theme configuration for the city's project. Theme data includes both custom themes and default styling. Requires a signed‑in user with access to the city. Response is returned as a plain object (not wrapped in data).",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "City ID for which to retrieve organization information"
          }
        ],
        "responses": {
          "200": {
            "description": "Organization details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "organizationName": {
                      "type": "string"
                    },
                    "logoUrl": {
                      "type": "string",
                      "format": "uri",
                      "nullable": true,
                      "description": "URL to organization logo image"
                    },
                    "active": {
                      "type": "boolean",
                      "description": "Whether the organization is currently active"
                    },
                    "theme": {
                      "type": "object",
                      "properties": {
                        "themeId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true,
                          "description": "Theme ID if a custom theme is configured"
                        },
                        "themeKey": {
                          "type": "string",
                          "nullable": true,
                          "description": "Theme key for styling configuration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "City or organization not found."
          }
        }
      }
    },
    "/api/v0/city/{city}/population/{year}": {
      "get": {
        "tags": [
          "City Population"
        ],
        "summary": "Get population data for a specific city and year",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "City ID for which to retrieve population data"
          },
          {
            "in": "path",
            "name": "year",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Year for which to retrieve population data"
          }
        ],
        "responses": {
          "200": {
            "description": "Population data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "Population data for the specified city and year"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/city/{city}/population": {
      "get": {
        "tags": [
          "City Population"
        ],
        "summary": "Get most recent population data for a specific city",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "City ID for which to retrieve population data"
          }
        ],
        "responses": {
          "200": {
            "description": "Population data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "Most recent population data for the city"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "City Population"
        ],
        "summary": "Upsert population values for a city",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "City ID for which to retrieve population data"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "cityPopulation",
                  "cityPopulationYear",
                  "regionPopulation",
                  "regionPopulationYear",
                  "countryPopulation",
                  "countryPopulationYear"
                ],
                "properties": {
                  "cityPopulation": {
                    "type": "number"
                  },
                  "cityPopulationYear": {
                    "type": "number"
                  },
                  "regionPopulation": {
                    "type": "number"
                  },
                  "regionPopulationYear": {
                    "type": "number"
                  },
                  "countryPopulation": {
                    "type": "number"
                  },
                  "countryPopulationYear": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Population values updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "cityPopulation": {
                          "type": "object",
                          "description": "City population record"
                        },
                        "regionPopulation": {
                          "type": "object",
                          "description": "Region population record"
                        },
                        "countryPopulation": {
                          "type": "object",
                          "description": "Country population record"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "City not found."
          }
        }
      }
    },
    "/api/v0/city/{city}": {
      "get": {
        "tags": [
          "City"
        ],
        "summary": "Get a single city by ID for the current user.",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "City wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "cityId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "name": {
                          "type": "string"
                        },
                        "region": {
                          "type": "string",
                          "nullable": true
                        },
                        "country": {
                          "type": "string",
                          "nullable": true
                        },
                        "locode": {
                          "type": "string",
                          "nullable": true
                        },
                        "population": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "year": {
                                "type": "number"
                              },
                              "population": {
                                "type": "number"
                              }
                            }
                          }
                        },
                        "boundaries": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "boundaryId": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "name": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "City"
        ],
        "summary": "Delete a city by ID for the current user.",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted city wrapped in data and deleted flag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    },
                    "deleted": {
                      "type": "boolean"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": {
                        "cityId": "..."
                      },
                      "deleted": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "City"
        ],
        "summary": "Update city fields by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "locode": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "shape": {
                    "type": "object",
                    "nullable": true
                  },
                  "area": {
                    "type": "integer",
                    "nullable": true
                  },
                  "projectId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated city wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "cityId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "name": {
                          "type": "string"
                        },
                        "region": {
                          "type": "string",
                          "nullable": true
                        },
                        "country": {
                          "type": "string",
                          "nullable": true
                        },
                        "locode": {
                          "type": "string",
                          "nullable": true
                        },
                        "population": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "year": {
                                "type": "number"
                              },
                              "population": {
                                "type": "number"
                              }
                            }
                          }
                        },
                        "boundaries": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "boundaryId": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "name": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/city/{city}/user/{user}": {
      "get": {
        "tags": [
          "City Users"
        ],
        "summary": "Get a user in a city",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User returned."
          }
        }
      },
      "patch": {
        "tags": [
          "City Users"
        ],
        "summary": "Update a user in a city",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "role"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "user",
                      "admin"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated."
          },
          "404": {
            "description": "User not found."
          }
        }
      },
      "delete": {
        "tags": [
          "City Users"
        ],
        "summary": "Delete a user in a city",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted."
          }
        }
      }
    },
    "/api/v0/city/{city}/user": {
      "post": {
        "tags": [
          "City Users"
        ],
        "summary": "Look up a user by email",
        "description": "Returns an existing user if found; otherwise returns a message.",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User found or message returned."
          }
        }
      },
      "get": {
        "tags": [
          "City Users"
        ],
        "summary": "List users for a city",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users returned."
          },
          "404": {
            "description": "Users not found."
          }
        }
      },
      "delete": {
        "tags": [
          "City Users"
        ],
        "summary": "Remove a user from a city by email",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User removed."
          }
        }
      }
    },
    "/api/v0/city/invite/{invite}": {
      "get": {
        "tags": [
          "City Invites"
        ],
        "summary": "Accept a city invite",
        "parameters": [
          {
            "in": "path",
            "name": "invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "in": "query",
            "name": "inventoryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to inventory on success."
          },
          "400": {
            "description": "Invalid token."
          },
          "404": {
            "description": "Not found."
          }
        }
      }
    },
    "/api/v0/city/invite": {
      "post": {
        "tags": [
          "City Invites"
        ],
        "summary": "Invite a user to a city with access to a specific inventory",
        "description": "Creates an invitation for a user to join a city with access to a specific inventory. The inviting user ID is automatically determined from the authenticated session. An email is sent to the specified user with an invitation link.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "inventoryId",
                  "email",
                  "name",
                  "cityId"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional user ID for the invited user (if already exists)"
                  },
                  "invitingUserId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the user sending the invite (automatically set from session)"
                  },
                  "inventoryId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Inventory ID to which the user is being invited"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address of the user to invite"
                  },
                  "name": {
                    "type": "string",
                    "description": "Display name for the invited user"
                  },
                  "cityId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "City ID to which the user is being invited"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invite created and email sent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "Created invite record"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email could not be sent, invalid input, or configuration error."
          },
          "401": {
            "description": "Not authenticated."
          },
          "404": {
            "description": "City not found."
          },
          "500": {
            "description": "Internal server error or configuration error."
          }
        }
      }
    },
    "/api/v0/city": {
      "post": {
        "tags": [
          "City"
        ],
        "summary": "Create a new city within a permitted project.",
        "description": "Creates a city associated to a project the user can manage, adds the current user to it, and triggers admin notifications. Requires a signed‑in session and project‑level permission. Returns the created (or existing) city in { data }.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "locode",
                  "name"
                ],
                "properties": {
                  "locode": {
                    "type": "string",
                    "description": "Location code for the city (e.g., \"US-NYC\")"
                  },
                  "name": {
                    "type": "string",
                    "description": "Display name of the city"
                  },
                  "shape": {
                    "type": "object",
                    "nullable": true,
                    "description": "GeoJSON geometry object defining the city boundaries"
                  },
                  "country": {
                    "type": "string",
                    "nullable": true,
                    "description": "Country name where the city is located"
                  },
                  "region": {
                    "type": "string",
                    "nullable": true,
                    "description": "Region or state name where the city is located"
                  },
                  "countryLocode": {
                    "type": "string",
                    "nullable": true,
                    "description": "Country location code"
                  },
                  "regionLocode": {
                    "type": "string",
                    "nullable": true,
                    "description": "Region location code"
                  },
                  "area": {
                    "type": "integer",
                    "nullable": true,
                    "description": "City area in square kilometers"
                  },
                  "projectId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "description": "Project ID to associate the city with (defaults to default project)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "City wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "cityId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "locode": {
                          "type": "string",
                          "nullable": true
                        },
                        "name": {
                          "type": "string",
                          "nullable": true
                        },
                        "shape": {
                          "type": "object",
                          "nullable": true
                        },
                        "country": {
                          "type": "string",
                          "nullable": true
                        },
                        "region": {
                          "type": "string",
                          "nullable": true
                        },
                        "countryLocode": {
                          "type": "string",
                          "nullable": true
                        },
                        "regionLocode": {
                          "type": "string",
                          "nullable": true
                        },
                        "area": {
                          "type": "integer",
                          "nullable": true
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true
                        },
                        "projectId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": {
                        "cityId": "a7b5c9d1-e8f2-4a6b-9c3d-8e1f2a5b6c7d",
                        "locode": "US-YYY",
                        "name": "New City",
                        "shape": null,
                        "country": null,
                        "region": null,
                        "countryLocode": null,
                        "regionLocode": null,
                        "area": null,
                        "created": "2025-01-01T00:00:00.000Z",
                        "lastUpdated": "2025-01-01T00:00:00.000Z",
                        "projectId": null
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "City count limit reached for the project."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Project not found."
          }
        }
      }
    },
    "/api/v0/city/transfer": {
      "patch": {
        "tags": [
          "City Transfer"
        ],
        "summary": "Transfer multiple cities to a target project (admin only).",
        "description": "Moves the specified cities into a different project after validating limits and existence, and notifies organization admins. Requires an admin session; non‑admins receive an authorization error. Returns a success flag when the transfer completes.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "cityIds",
                  "projectId"
                ],
                "properties": {
                  "cityIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "projectId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success flag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Project city-count limit exceeded."
          },
          "404": {
            "description": "Cities or project not found."
          }
        }
      }
    },
    "/api/v0/client/{client}": {
      "get": {
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Get a single OAuth client by ID with localized metadata.",
        "description": "Fetches a client and merges its i18n name/description entries by language. Requires a signed‑in session and OAUTH_ENABLED. Response is wrapped in '{' data '}'.",
        "parameters": [
          {
            "in": "path",
            "name": "client",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "OAuth client ID to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Client wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "clientId": {
                          "type": "string",
                          "description": "Unique identifier for the OAuth client"
                        },
                        "redirectUri": {
                          "type": "string",
                          "format": "uri",
                          "description": "Registered redirect URI for the OAuth flow"
                        },
                        "name": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Localized client names by language code"
                        },
                        "description": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Localized client descriptions by language code"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": {
                        "clientId": "abc123",
                        "redirectUri": "https://app.example.com/callback",
                        "name": {
                          "en": "Example App"
                        },
                        "description": {
                          "en": "Demo client"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Must be logged in."
          },
          "404": {
            "description": "Client not found."
          },
          "500": {
            "description": "OAuth not enabled or server error."
          }
        }
      },
      "delete": {
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Delete an OAuth client by ID.",
        "description": "Permanently removes a client record. Requires a signed‑in session and OAUTH_ENABLED. Returns 204 with no body on success.",
        "parameters": [
          {
            "in": "path",
            "name": "client",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "OAuth client ID to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Client deleted."
          },
          "401": {
            "description": "Must be logged in."
          },
          "404": {
            "description": "Client not found."
          },
          "500": {
            "description": "OAuth not enabled or server error."
          }
        }
      }
    },
    "/api/v0/datasource/{inventoryId}/datasource/{datasourceId}": {
      "delete": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Disconnect a data source and remove related inventory values (edit access).",
        "parameters": [
          {
            "in": "path",
            "name": "inventoryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Inventory ID to remove data source from"
          },
          {
            "in": "path",
            "name": "datasourceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Data source ID to disconnect"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted values and deleted flag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "datasourceId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string"
                          },
                          "data": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Fetched data from the data source"
                          },
                          "error": {
                            "type": "string",
                            "nullable": true,
                            "description": "Error message if data fetch failed"
                          }
                        }
                      }
                    },
                    "deleted": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Inventory value not found."
          }
        }
      },
      "get": {
        "tags": [
          "Data Sources"
        ],
        "summary": "Get a single data source with scaled data for an inventory (edit access).",
        "parameters": [
          {
            "in": "path",
            "name": "inventoryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Inventory ID to retrieve data source for"
          },
          {
            "in": "path",
            "name": "datasourceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Data source ID to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Data source with scaled data and population factors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "datasourceId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique identifier for the data source"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the data source"
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether the data source is enabled"
                    },
                    "sectorId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Associated sector identifier"
                    },
                    "data": {
                      "type": "object",
                      "description": "Processed data from the data source"
                    },
                    "populationIssue": {
                      "type": "string",
                      "nullable": true,
                      "description": "Population scaling issue if any"
                    },
                    "countryPopulationScaleFactor": {
                      "type": "number",
                      "description": "Scaling factor for country population"
                    },
                    "regionPopulationScaleFactor": {
                      "type": "number",
                      "description": "Scaling factor for region population"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user lacks edit access to the inventory."
          },
          "404": {
            "description": "Inventory or data source not found."
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/activity-value/{id}": {
      "patch": {
        "tags": [
          "Inventory Activity"
        ],
        "summary": "Update an activity value by ID (edit access).",
        "description": "Updates the activity value and related gas/emissions factors as needed. Requires a signed‑in user with edit access. Returns a success flag with the updated value.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success flag and updated value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Whether the update was successful"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique identifier for the updated activity value"
                        },
                        "activityData": {
                          "type": "object",
                          "additionalProperties": true,
                          "description": "Updated activity data specific to this inventory value"
                        },
                        "co2eq": {
                          "type": "number",
                          "description": "CO2 equivalent emissions (in bigint format)"
                        },
                        "co2eqYears": {
                          "type": "number",
                          "description": "Number of years for CO2 equivalent calculation"
                        },
                        "inventoryValueId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true,
                          "description": "Associated inventory value ID"
                        },
                        "datasourceId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true,
                          "description": "Associated data source ID"
                        },
                        "metadata": {
                          "type": "object",
                          "additionalProperties": true,
                          "description": "Updated metadata for the activity value"
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation timestamp"
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Last update timestamp"
                        }
                      },
                      "description": "Updated activity value with all properties"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (e.g., values too large)."
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory Activity"
        ],
        "summary": "Delete an activity value by ID (edit access).",
        "description": "Removes the activity value row. Requires a signed‑in user with edit access. Returns a success flag.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success flag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Inventory Activity"
        ],
        "summary": "Get a single activity value by ID (edit access).",
        "description": "Fetches the activity value with nested inventory/gas values for the inventory. Requires a signed‑in user with edit access to the inventory. Response is wrapped in '{' data '}'.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity value wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique identifier for the activity value"
                        },
                        "activityData": {
                          "type": "object",
                          "additionalProperties": true,
                          "description": "Activity data specific to this inventory value"
                        },
                        "co2eq": {
                          "type": "number",
                          "description": "CO2 equivalent emissions (in bigint format)"
                        },
                        "co2eqYears": {
                          "type": "number",
                          "description": "Number of years for CO2 equivalent calculation"
                        },
                        "inventoryValueId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true,
                          "description": "Associated inventory value ID"
                        },
                        "datasourceId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true,
                          "description": "Associated data source ID"
                        },
                        "metadata": {
                          "type": "object",
                          "additionalProperties": true,
                          "description": "Additional metadata for the activity value"
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation timestamp"
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Last update timestamp"
                        },
                        "inventoryValue": {
                          "type": "object",
                          "properties": {
                            "inventoryValueId": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "gpcReferenceNumber": {
                              "type": "string"
                            },
                            "inventoryId": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "value": {
                              "type": "number"
                            },
                            "inputMethodology": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "subCategoryId": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "created": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "lastUpdated": {
                              "type": "string",
                              "format": "date-time"
                            }
                          },
                          "description": "Associated inventory value with calculation data"
                        },
                        "gasValues": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "gasValueId": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "gas": {
                                "type": "string"
                              },
                              "value": {
                                "type": "number"
                              },
                              "activityValueId": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "emissionsFactor": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "format": "uuid"
                                  },
                                  "gpcReferenceNumber": {
                                    "type": "string"
                                  },
                                  "emissionsPerActivity": {
                                    "type": "number"
                                  },
                                  "gas": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "description": "Gas-specific values and emissions factors"
                          }
                        }
                      },
                      "description": "Single activity value with associated inventory value and gas values"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/activity-value": {
      "post": {
        "tags": [
          "Inventory Activity"
        ],
        "summary": "Create an activity value (edit access).",
        "description": "Creates an activity and associated inventory/gas values as needed. Requires a signed‑in user with edit access to the inventory. Returns a success flag and the created value in { success, data }.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "activityData": {
                    "type": "object"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "inventoryValueId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "inventoryValue": {
                    "type": "object"
                  },
                  "gasValues": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success flag and created value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique identifier for the created activity value"
                        },
                        "activityData": {
                          "type": "object",
                          "additionalProperties": true,
                          "description": "Activity data specific to this inventory value"
                        },
                        "co2eq": {
                          "type": "number",
                          "description": "CO2 equivalent emissions (in bigint format)"
                        },
                        "co2eqYears": {
                          "type": "number",
                          "description": "Number of years for CO2 equivalent calculation"
                        },
                        "inventoryValueId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true,
                          "description": "Associated inventory value ID"
                        },
                        "datasourceId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true,
                          "description": "Associated data source ID"
                        },
                        "metadata": {
                          "type": "object",
                          "additionalProperties": true,
                          "description": "Additional metadata for the activity value"
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation timestamp"
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Last update timestamp"
                        }
                      },
                      "description": "Created activity value with all properties"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          }
        },
        "examples": {
          "application/json": {
            "gasValues": [
              {
                "gas": "CO2",
                "value": 1000.5
              }
            ],
            "inventoryValueId": "550e8400-e29b-41d4-a716-446655440000",
            "inventoryValue": {
              "gpcReferenceNumber": "1.1.1",
              "value": 50000,
              "inputMethodology": "550e8400-e29b-41d4-a716-446655440001",
              "subCategoryId": "550e8400-e29b-41d4-a716-446655440002"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory Activity"
        ],
        "summary": "Delete activities by subsector or reference number (edit access).",
        "description": "Deletes activity rows within a subsector or by GPC reference number. Requires a signed‑in user with edit access. Returns a success flag and deletedCount in { success, data }.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "subSectorId",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "gpcReferenceNumber",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success flag and deleted count.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deletedCount": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query combination."
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/cdp": {
      "post": {
        "tags": [
          "Inventory CDP"
        ],
        "summary": "Submit inventory emissions to CDP questionnaire",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submission success status returned."
          },
          "424": {
            "description": "CDP API response error."
          },
          "500": {
            "description": "CDP service disabled."
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/download": {
      "get": {
        "tags": [
          "Inventory Download"
        ],
        "summary": "Download inventory data",
        "description": "Downloads inventory data in various formats. If `format` is omitted or `json`, returns JSON. Other formats stream binary.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv",
                "xls",
                "ecrf"
              ]
            }
          },
          {
            "in": "query",
            "name": "lng",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory data content."
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/hiap": {
      "get": {
        "tags": [
          "Inventory HIAP"
        ],
        "summary": "Get HIAP ranking or related data for an inventory.",
        "description": "Returns HIAP insights for the selected actionType and language. Requires a signed‑in user with access to the inventory. Response is wrapped in '{' data '}' (actionType‑dependent shape).",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "actionType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "lng",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ignoreExisting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HIAP result wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "inventoryId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "year": {
                          "type": "number"
                        },
                        "hiapScore": {
                          "type": "number",
                          "description": "Overall HIAP score for the inventory"
                        },
                        "categoryScores": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string"
                              },
                              "score": {
                                "type": "number"
                              },
                              "indicators": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "indicator": {
                                      "type": "string"
                                    },
                                    "score": {
                                      "type": "number"
                                    },
                                    "description": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Inventory HIAP"
        ],
        "summary": "Update selection status of ranked actions.",
        "description": "Updates the isSelected field for ranked actions. All actions not in the selectedActionIds array will be set to false.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "selectedActionIds"
                ],
                "properties": {
                  "selectedActionIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Selection updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "updated": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/notation-keys": {
      "get": {
        "tags": [
          "Inventory Notation Keys"
        ],
        "summary": "List notation key candidates grouped by sector reference number.",
        "description": "Returns unfilled or notation-key-filled subcategory entries grouped by sector ref number to help populate notation keys. Requires a signed‑in user with read access to the inventory. Response is { success, result }.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidates grouped by sector reference number.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "notationKeys": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "used": {
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "summary": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number"
                            },
                            "used": {
                              "type": "number"
                            },
                            "unused": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Inventory Notation Keys"
        ],
        "summary": "Set notation keys for subcategories in an inventory.",
        "description": "Saves notation keys for the inventory’s subcategories, creating inventory values where necessary. Requires a signed‑in user with access to the inventory. Returns { success, result } listing affected values.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notationKeys": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "subCategoryId",
                        "unavailableReason",
                        "unavailableExplanation"
                      ],
                      "properties": {
                        "subCategoryId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "unavailableReason": {
                          "type": "string",
                          "enum": [
                            "no-occurrance",
                            "not-estimated",
                            "confidential-information",
                            "included-elsewhere"
                          ]
                        },
                        "unavailableExplanation": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Save result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "inventoryValueId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "subCategoryId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "notationKey": {
                            "type": "string"
                          },
                          "value": {
                            "type": "number",
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/organization": {
      "get": {
        "tags": [
          "Inventory Organization"
        ],
        "summary": "Get organization branding and theme information for an inventory",
        "description": "Retrieves organization details including identifier, name, logo URL, active status, and theme configuration for the inventory's associated organization. Requires a signed‑in user with access to the inventory.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Inventory ID for which to retrieve organization information"
          }
        ],
        "responses": {
          "200": {
            "description": "Organization details with theme information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizationId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique identifier for the organization"
                    },
                    "organizationName": {
                      "type": "string",
                      "description": "Display name of the organization"
                    },
                    "logoUrl": {
                      "type": "string",
                      "format": "uri",
                      "nullable": true,
                      "description": "URL to organization logo image"
                    },
                    "active": {
                      "type": "boolean",
                      "description": "Whether the organization is currently active"
                    },
                    "theme": {
                      "type": "object",
                      "properties": {
                        "themeId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true,
                          "description": "Theme ID if a custom theme is configured"
                        },
                        "themeKey": {
                          "type": "string",
                          "nullable": true,
                          "description": "Theme key for styling configuration"
                        }
                      },
                      "description": "Organization theme configuration"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user lacks access to the inventory."
          },
          "404": {
            "description": "Inventory or organization not found."
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/populations": {
      "get": {
        "tags": [
          "Inventory Populations"
        ],
        "summary": "Get population values used by the inventory’s city and year.",
        "description": "Returns city/region/country population values aligned to the inventory’s year (nearest within thresholds). Requires a signed‑in user with access to the inventory. Response is wrapped in '{' data '}' with population fields.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Population data wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "cityId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "population": {
                          "type": "number"
                        },
                        "year": {
                          "type": "number"
                        },
                        "countryPopulation": {
                          "type": "number"
                        },
                        "countryPopulationYear": {
                          "type": "number"
                        },
                        "regionPopulation": {
                          "type": "number"
                        },
                        "regionPopulationYear": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Inventory not found."
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/progress": {
      "get": {
        "tags": [
          "Inventory Progress"
        ],
        "summary": "Get data entry progress for an inventory",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Progress data returned."
          },
          "404": {
            "description": "Inventory not found."
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/results/{sectorName}": {
      "get": {
        "tags": [
          "Inventory Results"
        ],
        "summary": "Get emissions breakdown for a specific sector.",
        "description": "Computes the breakdown for the chosen sector (by name) within the inventory. Requires a signed‑in user with access to the inventory. Response is wrapped in '{' data '}' (shape depends on sector).",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "sectorName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Breakdown wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "sectorName": {
                          "type": "string"
                        },
                        "year": {
                          "type": "number"
                        },
                        "totalEmissions": {
                          "type": "number"
                        },
                        "subsectorResults": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "subsectorId": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "subsectorName": {
                                "type": "string"
                              },
                              "emissions": {
                                "type": "number"
                              },
                              "percentage": {
                                "type": "number"
                              }
                            }
                          }
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/results/emissions-forecast": {
      "get": {
        "tags": [
          "Inventory Results"
        ],
        "summary": "Get emissions forecast with confidence metrics for an inventory.",
        "description": "Generates and returns emissions forecast data for the specified inventory using advanced forecasting models. Includes yearly predictions with confidence levels and methodology information. Requires a signed‑in user with read access to the inventory. Response is wrapped in '{' data '}'.",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Inventory ID for which to generate emissions forecast"
          }
        ],
        "responses": {
          "200": {
            "description": "Emissions forecast data wrapped in data object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "forecast": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "year": {
                                "type": "integer",
                                "description": "Forecast year"
                              },
                              "emissions": {
                                "type": "number",
                                "description": "Predicted CO2 equivalent emissions for the year"
                              },
                              "confidence": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1,
                                "description": "Confidence level of the forecast (0-1, where 1 is highest confidence)"
                              }
                            }
                          }
                        },
                        "methodology": {
                          "type": "string",
                          "description": "Forecasting methodology used"
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp of when forecast was generated"
                        }
                      },
                      "description": "Emissions forecast data with methodology and confidence metrics"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user lacks access to the inventory."
          },
          "404": {
            "description": "Inventory not found."
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}": {
      "get": {
        "summary": "Get inventory details by ID",
        "description": "Returns inventory details including total emissions for the specified inventory ID. If 'default' is provided, returns the user's default inventory.",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Inventory UUID or 'default'"
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Inventory"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid inventory ID"
          },
          "404": {
            "description": "Inventory not found"
          }
        }
      },
      "delete": {
        "summary": "Delete an inventory by ID",
        "description": "Deletes the specified inventory. Only users with ORG_ADMIN permission can delete inventories.",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Inventory UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Inventory"
                    },
                    "deleted": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Inventory not found"
          }
        }
      },
      "patch": {
        "summary": "Update inventory details",
        "description": "Updates the specified inventory. Only users with edit permission can update inventories.",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Inventory UUID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertInventoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Inventory"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Inventory not found"
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/value/{subcategory}": {
      "get": {
        "tags": [
          "Inventory Values"
        ],
        "summary": "Get inventory value for a subcategory",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "subcategory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory value returned."
          },
          "404": {
            "description": "Not found."
          }
        }
      },
      "patch": {
        "tags": [
          "Inventory Values"
        ],
        "summary": "Upsert inventory value for a subcategory",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "subcategory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory value updated or created."
          },
          "400": {
            "description": "Invalid request."
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/value": {
      "get": {
        "tags": [
          "Inventory Values"
        ],
        "summary": "List inventory values by subcategories",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "subCategoryIds",
            "required": true,
            "description": "Comma-separated subcategory IDs",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory values returned."
          },
          "400": {
            "description": "Missing subCategoryIds."
          }
        }
      }
    },
    "/api/v0/inventory/{inventory}/value/subsector/{subsector}": {
      "get": {
        "tags": [
          "Inventory Values"
        ],
        "summary": "List inventory values for a subsector",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "subsector",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory values returned."
          }
        }
      },
      "patch": {
        "tags": [
          "Inventory Values"
        ],
        "summary": "Upsert inventory value in a subsector by GPC reference number",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "subsector",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "gpcReferenceNumber"
                ],
                "properties": {
                  "gpcReferenceNumber": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory value updated or created."
          },
          "400": {
            "description": "Invalid request."
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory Values"
        ],
        "summary": "Delete inventory value for a subsector",
        "parameters": [
          {
            "in": "path",
            "name": "inventory",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "subsector",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory value deleted."
          },
          "404": {
            "description": "Inventory value not found."
          }
        }
      }
    },
    "/api/v0/mock": {
      "post": {
        "tags": [
          "Mock"
        ],
        "summary": "Echo a simple mock response for authenticated users.",
        "description": "Returns a static object for testing write endpoints. Requires a signed‑in session; unauthorized requests receive 401. Response is wrapped in { data }.",
        "responses": {
          "200": {
            "description": "Mock response wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": "Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/api/v0/oauth/metadata": {
      "get": {
        "tags": [
          "OAuth"
        ],
        "summary": "Advertise OAuth 2.0 Authorization Server metadata (RFC 8414).",
        "description": "Public endpoint that returns the discovery document for OAuth clients, including issuer, authorization endpoint, token endpoint, supported scopes, response types, grant types, and PKCE methods. Requires the OAUTH_ENABLED feature flag; otherwise returns a 500 configuration error. Useful for dynamic client configuration and interoperability.",
        "responses": {
          "200": {
            "description": "Metadata document with required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "issuer": {
                      "type": "string"
                    },
                    "authorization_endpoint": {
                      "type": "string"
                    },
                    "token_endpoint": {
                      "type": "string"
                    },
                    "scopes_supported": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "OAuth scope identifiers supported by the authorization server",
                        "example": "read"
                      },
                      "description": "List of OAuth 2.0 scopes supported by the authorization server"
                    },
                    "response_types_supported": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "OAuth response type identifier",
                        "example": "code"
                      },
                      "description": "OAuth 2.0 response types supported by the authorization server"
                    },
                    "grant_types_supported": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "OAuth grant type identifier",
                        "example": "authorization_code"
                      },
                      "description": "OAuth 2.0 grant types supported by the authorization server"
                    },
                    "service_documentation": {
                      "type": "string",
                      "description": "URL to the authorization server's documentation",
                      "example": "https://github.com/Open-Earth-Foundation/CityCatalyst/wiki/CityCatalyst-Backend-API"
                    },
                    "ui_locales_supported": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Language tag for supported UI locales",
                        "example": "en"
                      },
                      "description": "Languages supported for the user interface"
                    },
                    "code_challenge_methods_supported": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "PKCE code challenge method",
                        "example": "S256"
                      },
                      "description": "PKCE code challenge methods supported by the authorization server"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "issuer": "https://api.citycatalyst.example",
                      "authorization_endpoint": "https://api.citycatalyst.example/authorize/",
                      "token_endpoint": "https://api.citycatalyst.example/api/v0/token/",
                      "scopes_supported": [
                        "read",
                        "write"
                      ],
                      "response_types_supported": [
                        "code"
                      ],
                      "grant_types_supported": [
                        "authorization_code",
                        "refresh_token"
                      ],
                      "service_documentation": "https://github.com/Open-Earth-Foundation/CityCatalyst/wiki/CityCatalyst-Backend-API",
                      "ui_locales_supported": [
                        "en",
                        "de",
                        "es",
                        "pt"
                      ],
                      "code_challenge_methods_supported": [
                        "S256"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "OAuth not enabled or configuration error."
          }
        }
      }
    },
    "/api/v0/organizations/{organization}/active-status": {
      "patch": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update organization active status",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "active"
                ],
                "properties": {
                  "active": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Active status updated."
          },
          "404": {
            "description": "Organization not found."
          }
        }
      }
    },
    "/api/v0/organizations/{organization}/branding": {
      "patch": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update organization branding (theme and logos)",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "themeId"
                ],
                "properties": {
                  "themeId": {
                    "type": "string"
                  },
                  "logoUrl": {
                    "type": "string",
                    "format": "uri",
                    "nullable": true
                  },
                  "clearLogoUrl": {
                    "type": "string",
                    "format": "uri",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Branding updated."
          },
          "404": {
            "description": "Organization not found."
          }
        }
      }
    },
    "/api/v0/organizations/{organization}/invitations/accept": {
      "patch": {
        "tags": [
          "Organization Invitations"
        ],
        "summary": "Accept organization admin invitation",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "token",
                  "organizationId"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "token": {
                    "type": "string"
                  },
                  "organizationId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation accepted."
          },
          "401": {
            "description": "Unauthorized or token mismatch."
          },
          "500": {
            "description": "Configuration or server error."
          }
        }
      }
    },
    "/api/v0/organizations/{organization}/invitations": {
      "get": {
        "tags": [
          "Organization Invitations"
        ],
        "summary": "List organization invitations",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitations returned."
          },
          "404": {
            "description": "Invitations not found."
          }
        }
      },
      "post": {
        "tags": [
          "Organization Invitations"
        ],
        "summary": "Invite users to an organization",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "organizationId",
                  "inviteeEmails",
                  "role"
                ],
                "properties": {
                  "organizationId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "inviteeEmails": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email"
                    }
                  },
                  "role": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitations sent."
          },
          "400": {
            "description": "Organization ID mismatch or invalid input."
          },
          "404": {
            "description": "Organization not found."
          },
          "500": {
            "description": "Failed to send some invitations."
          }
        }
      }
    },
    "/api/v0/organizations/{organization}/projects": {
      "post": {
        "tags": [
          "Organization Projects"
        ],
        "summary": "Create a new project in the organization (admin only).",
        "description": "Creates a project with a name and cityCountLimit and notifies organization admins. Requires an admin session. Response is the created project (not wrapped).",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "cityCountLimit"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "cityCountLimit": {
                    "type": "integer",
                    "minimum": 1
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "organizationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdated": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found."
          }
        }
      },
      "get": {
        "tags": [
          "Organization Projects"
        ],
        "summary": "List projects for an organization visible to the current user.",
        "description": "Returns the projects in the organization filtered by the user’s access (admin, org admin, project admin, or city membership). Requires a signed‑in session. Response is a JSON array or context object (not wrapped).",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Projects visible to the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "projectId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string",
                        "nullable": true
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/organizations/{organization}/role": {
      "patch": {
        "tags": [
          "Organizations"
        ],
        "summary": "Promote a user to organization admin or invite by email",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contactEmail"
                ],
                "properties": {
                  "contactEmail": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated or invite sent."
          },
          "404": {
            "description": "Organization not found."
          }
        }
      }
    },
    "/api/v0/organizations/{organization}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get a single organization with projects and theme (admin only).",
        "description": "Returns the organization record with related projects and theme fields. Requires an admin session. Response is an object (not wrapped).",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdated": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found."
          }
        }
      },
      "patch": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update organization properties (admin only).",
        "description": "Updates organization fields such as name and contactEmail. Requires an admin session. Response is the updated organization object (not wrapped).",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "contactEmail": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdated": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot update default organization."
          },
          "404": {
            "description": "Organization not found."
          }
        }
      }
    },
    "/api/v0/organizations/{organization}/users": {
      "delete": {
        "tags": [
          "Organization Users"
        ],
        "summary": "Remove a user from an organization (admin/org-admin).",
        "description": "Removes the given email from the organization’s owners/admins. Requires an admin or org_admin session for the organization. Returns an empty body on success.",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empty body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "user-not-found query param missing."
          }
        }
      }
    },
    "/api/v0/organizations": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create a new organization (admin only).",
        "description": "Creates an active organization with name and contactEmail. Requires an admin session. Response is the created organization object (not wrapped).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "contactEmail"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "contactEmail": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Organization name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "List organizations with projects and pending admin invites (admin only).",
        "description": "Returns all organizations including selected project fields and pending org_admin invites. Requires an admin session; non‑admins receive 401/403 via middleware handlers. Response is a JSON array (not wrapped).",
        "responses": {
          "200": {
            "description": "Array of organizations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "organizationId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string",
                        "nullable": true
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/organizations/themes": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "List available branding themes.",
        "description": "Returns the list of themes that can be assigned to organizations. Requires a signed‑in session. Response is an array of theme objects (not wrapped).",
        "responses": {
          "200": {
            "description": "Array of themes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "themeId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "themeKey": {
                        "type": "string"
                      },
                      "primaryColor": {
                        "type": "string"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "lastUpdated": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/projects/{project}/bulk-download": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Bulk download inventories for a project (CSV)",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "lng",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CSV file attachment."
          },
          "400": {
            "description": "Invalid project ID format."
          }
        }
      }
    },
    "/api/v0/projects/{project}/modules/{module}/access": {
      "get": {
        "tags": [
          "Project Modules"
        ],
        "summary": "Check if a project has access to a module",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "module",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Access flag returned."
          },
          "403": {
            "description": "Access denied."
          },
          "404": {
            "description": "Project not found."
          }
        }
      },
      "post": {
        "tags": [
          "Project Modules"
        ],
        "summary": "Enable module access for a project (admin only).",
        "description": "Grants a project access to a specific module. Requires admin or organization admin privileges. Returns the created project-module relationship.",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "module",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Module access enabled successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "Created project-module relationship"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ModuleId is missing."
          },
          "403": {
            "description": "Access denied - user lacks admin privileges."
          },
          "404": {
            "description": "Project not found."
          },
          "500": {
            "description": "Failed to enable module access."
          }
        }
      },
      "delete": {
        "tags": [
          "Project Modules"
        ],
        "summary": "Disable module access for a project (admin only).",
        "description": "Revokes a project's access to a specific module. Requires admin or organization admin privileges. Returns the updated project-module relationship.",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "module",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Module access disabled successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "Updated project-module relationship"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ModuleId is missing."
          },
          "403": {
            "description": "Access denied - user lacks admin privileges."
          },
          "404": {
            "description": "Project not found."
          },
          "500": {
            "description": "Failed to disable module access."
          }
        }
      }
    },
    "/api/v0/projects/{project}/modules": {
      "get": {
        "tags": [
          "Project Modules"
        ],
        "summary": "List modules enabled for a specific project",
        "description": "Retrieves all modules that have been enabled for the specified project. Returns a list of module objects with their localized metadata and configuration details. Requires authentication to access project module information.",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID for which to retrieve enabled modules"
          }
        ],
        "responses": {
          "200": {
            "description": "List of modules enabled for the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique identifier for the module"
                          },
                          "stage": {
                            "type": "string",
                            "description": "Module development stage"
                          },
                          "name": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Localized module names by language code"
                          },
                          "description": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Localized module descriptions by language code"
                          },
                          "tagline": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Localized module taglines by language code"
                          },
                          "type": {
                            "type": "string",
                            "description": "Module type classification"
                          },
                          "author": {
                            "type": "string",
                            "description": "Module author or maintainer"
                          },
                          "url": {
                            "type": "string",
                            "description": "Module documentation or source URL"
                          },
                          "created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Module creation timestamp"
                          },
                          "last_updated": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Module last update timestamp"
                          }
                        }
                      },
                      "description": "Array of module objects with localized metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user lacks access to the project."
          },
          "404": {
            "description": "Project not found."
          }
        }
      }
    },
    "/api/v0/projects/{project}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a single project by ID (admin only).",
        "description": "Returns the project object for the given ID. Requires an admin session; non‑admins receive an authorization error. Response is the project object (not wrapped).",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Project object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdated": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found."
          }
        }
      },
      "patch": {
        "tags": [
          "Projects"
        ],
        "summary": "Update a project by ID (admin only).",
        "description": "Updates project properties (name, description, cityCountLimit). If cityCountLimit is changed, organization admins are notified via email. Cannot update the default project. Requires an admin session. Response is the updated project object (not wrapped).",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New name for the project"
                  },
                  "cityCountLimit": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Maximum number of cities allowed in the project"
                  },
                  "description": {
                    "type": "string",
                    "description": "New description for the project"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated project object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdated": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot update default project or invalid request data."
          },
          "401": {
            "description": "Unauthorized - user lacks admin privileges."
          },
          "404": {
            "description": "Project not found."
          }
        }
      }
    },
    "/api/v0/projects/{project}/summary": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get totals for cities, emissions, population, and data sources in a project.",
        "description": "Computes high‑level aggregates for the project, including city count, emissions sum, total population (based on most recent inventory years per city), and total data sources. No explicit authentication is enforced in this handler currently. Response is a plain object (not wrapped).",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Summary object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalCities": {
                      "type": "integer"
                    },
                    "totalEmissions": {
                      "type": "number"
                    },
                    "totalPopulation": {
                      "type": "number"
                    },
                    "totalDataSources": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found."
          }
        }
      }
    },
    "/api/v0/projects/{project}/users": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List users who belong to a project (admin only).",
        "description": "Returns all users who have access to the specified project. Requires a signed‑in session with admin or organization admin privileges for the project's organization. Response is an array of user objects with their roles and join timestamps.",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID for which to retrieve user membership"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of users with project membership information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "userId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier for the user"
                      },
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "User's email address"
                      },
                      "role": {
                        "type": "string",
                        "enum": [
                          "Admin",
                          "User",
                          "Viewer"
                        ],
                        "description": "User's role within the project"
                      },
                      "joinedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when user joined the project"
                      }
                    },
                    "description": "User object with project membership details"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - user lacks admin privileges for the project."
          },
          "404": {
            "description": "Project not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Remove a user from a project by email (admin only).",
        "description": "Removes the user with the specified email address from the project membership. Requires a signed‑in session with admin or organization admin privileges for the project's organization. The user will lose access to all project resources.",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Project ID from which to remove the user"
          },
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "Email address of the user to remove from the project"
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully removed from project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Empty response body"
                }
              }
            }
          },
          "400": {
            "description": "Email query parameter is missing or invalid."
          },
          "403": {
            "description": "Access denied - user lacks admin privileges for the project."
          },
          "404": {
            "description": "Project not found."
          }
        }
      }
    },
    "/api/v0/public/city/{cityId}": {
      "get": {
        "tags": [
          "Public"
        ],
        "summary": "Get public city information by ID.",
        "description": "Public endpoint that returns city details only if the city has at least one public inventory. No authentication is required. Response is wrapped in '{' data '}' and includes basic project/organization branding fields.",
        "parameters": [
          {
            "in": "path",
            "name": "cityId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "City details wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "cityId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "name": {
                          "type": "string"
                        },
                        "region": {
                          "type": "string",
                          "nullable": true
                        },
                        "country": {
                          "type": "string",
                          "nullable": true
                        },
                        "locode": {
                          "type": "string",
                          "nullable": true
                        },
                        "population": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "year": {
                                "type": "number"
                              },
                              "population": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid city ID."
          },
          "401": {
            "description": "No public data available for this city."
          },
          "404": {
            "description": "City not found."
          }
        }
      }
    },
    "/api/v0/public/project/{projectId}/cities": {
      "get": {
        "tags": [
          "Public"
        ],
        "summary": "Get all public cities within a project by project ID.",
        "description": "Public endpoint that returns all cities within a project that have at least one public inventory. No authentication is required. Response is wrapped in '{' data '}' and includes basic city information.",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The project ID to fetch public cities for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of public cities in the project wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string"
                          },
                          "locode": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "region": {
                            "type": "string"
                          },
                          "area": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "cityId": "c9d8a3c2-1234-4c1a-9de1-6f3f25a2b111",
                          "name": "Sample City",
                          "locode": "US-XXX",
                          "country": "United States",
                          "region": "California",
                          "area": 500000
                        },
                        {
                          "cityId": "a7b5c9d1-e8f2-4a6b-9c3d-8e1f2a5b6c7d",
                          "name": "Another City",
                          "locode": "US-YYY",
                          "country": "United States",
                          "region": "Texas",
                          "area": 750000
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid project ID."
          },
          "404": {
            "description": "Project not found or no public cities available."
          }
        }
      }
    },
    "/api/v0": {
      "get": {
        "tags": [
          "Root"
        ],
        "summary": "API root endpoint with a welcome banner.",
        "description": "Public endpoint that returns a simple welcome message indicating the API is reachable. No authentication is required. The response is a plain object with a message field.",
        "responses": {
          "200": {
            "description": "Welcome message object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/subsector/{subsectorId}": {
      "get": {
        "tags": [
          "Subsector"
        ],
        "summary": "Get a subsector record by ID.",
        "description": "Public endpoint that fetches a subsector by its identifier. No authentication is enforced. Response is wrapped in '{' data '}' containing the subsector fields.",
        "parameters": [
          {
            "in": "path",
            "name": "subsectorId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subsector wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "subsectorId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "subsectorName": {
                          "type": "string"
                        },
                        "sectorId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "referenceNumber": {
                          "type": "string"
                        },
                        "scopeId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "name": {
                          "type": "string"
                        },
                        "categoryId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Subsector not found."
          }
        }
      }
    },
    "/api/v0/token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Exchange an authorization code for access and refresh tokens (OAuth 2.0 PKCE).",
        "description": "Accepts a short‑lived authorization code issued by the server and returns a bearer access token plus a refresh token. Requires the OAUTH_ENABLED feature flag and the content type application/x-www-form-urlencoded; no user session is required for this exchange. Validates client_id/redirect_uri, token issuer/audience, single‑use code, and PKCE S256 challenge.",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "grant_type",
                  "code",
                  "redirect_uri",
                  "client_id",
                  "code_verifier"
                ],
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "enum": [
                      "authorization_code"
                    ]
                  },
                  "code": {
                    "type": "string"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "format": "uri"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "code_verifier": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens issued successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "token_type": {
                      "type": "string"
                    },
                    "expires_in": {
                      "type": "integer"
                    },
                    "refresh_token": {
                      "type": "string"
                    },
                    "scope": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "token_type": "Bearer",
                      "expires_in": 604800,
                      "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "scope": "read write"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters or verification failed (e.g., client/redirect mismatch, expired/invalid code, PKCE failure, reused code)."
          },
          "415": {
            "description": "Unsupported content type."
          },
          "500": {
            "description": "OAuth not enabled or configuration error."
          }
        }
      }
    },
    "/api/v0/user/{userId}": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update a user's profile",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "preferredLanguage"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "preferredLanguage": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/api/v0/user/access-status": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the current user’s access status across resources.",
        "description": "Returns a summary of the user’s access and roles across organizations/projects/cities. Requires a signed‑in session. Response is wrapped in '{' data '}' with access metadata.",
        "responses": {
          "200": {
            "description": "Access status wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "userId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "role": {
                          "type": "string",
                          "enum": [
                            "Admin",
                            "User",
                            "Viewer"
                          ]
                        },
                        "permissions": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of user permissions"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/api/v0/user/cities/{id}/results": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get year‑over‑year emissions results for a user’s city.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "cityId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "inventoryId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "year": {
                          "type": "number"
                        },
                        "totalEmissions": {
                          "type": "number"
                        },
                        "sectorResults": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "sectorId": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "sectorName": {
                                "type": "string"
                              },
                              "emissions": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "City not found."
          }
        }
      }
    },
    "/api/v0/user/clients/{client}": {
      "get": {
        "tags": [
          "User Clients"
        ],
        "summary": "Get OAuth client authorization for current user",
        "parameters": [
          {
            "in": "path",
            "name": "client",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client authorization returned."
          },
          "401": {
            "description": "Not signed in."
          },
          "404": {
            "description": "Authorization not found."
          },
          "500": {
            "description": "OAuth not enabled."
          }
        }
      },
      "delete": {
        "tags": [
          "User Clients"
        ],
        "summary": "Revoke OAuth client authorization for current user",
        "parameters": [
          {
            "in": "path",
            "name": "client",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Authorization revoked."
          },
          "401": {
            "description": "Not signed in."
          },
          "404": {
            "description": "Authorization not found."
          },
          "500": {
            "description": "OAuth not enabled."
          }
        }
      }
    },
    "/api/v0/user/clients": {
      "get": {
        "tags": [
          "User Clients"
        ],
        "summary": "List OAuth client authorizations for current user",
        "responses": {
          "200": {
            "description": "Client authorizations returned."
          },
          "401": {
            "description": "Not signed in."
          },
          "500": {
            "description": "OAuth not enabled."
          }
        }
      }
    },
    "/api/v0/user/invites/{cityInviteId}": {
      "delete": {
        "tags": [
          "User Invites"
        ],
        "summary": "Cancel a city invite",
        "parameters": [
          {
            "in": "path",
            "name": "cityInviteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invite canceled."
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      },
      "patch": {
        "tags": [
          "User Invites"
        ],
        "summary": "Re-send a city invite (reset to pending)",
        "parameters": [
          {
            "in": "path",
            "name": "cityInviteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invite status updated to pending."
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/api/v0/user/invites/accept": {
      "patch": {
        "tags": [
          "User Invites"
        ],
        "summary": "Accept invites to join cities",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "token",
                  "cityIds"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "token": {
                    "type": "string"
                  },
                  "cityIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invites accepted and membership created."
          },
          "401": {
            "description": "Unauthorized or invalid token."
          },
          "500": {
            "description": "Server or configuration error."
          }
        }
      }
    },
    "/api/v0/user/invites": {
      "get": {
        "tags": [
          "User Invites"
        ],
        "summary": "List city invites sent by current user",
        "responses": {
          "200": {
            "description": "Invites returned with status updates."
          },
          "401": {
            "description": "Not signed in."
          }
        }
      },
      "post": {
        "tags": [
          "User Invites"
        ],
        "summary": "Invite users to multiple cities",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "emails",
                  "cityIds"
                ],
                "properties": {
                  "emails": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email"
                    }
                  },
                  "cityIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invites created and emails sent where possible."
          },
          "401": {
            "description": "Not signed in."
          },
          "500": {
            "description": "Something went wrong."
          }
        }
      }
    },
    "/api/v0/user/permissions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Check user's access for a resource context",
        "parameters": [
          {
            "in": "query",
            "name": "organizationId",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "projectId",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "cityId",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "inventoryId",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Access status returned for provided context."
          },
          "400": {
            "description": "No resource ID provided."
          },
          "401": {
            "description": "Authentication required."
          }
        }
      }
    },
    "/api/v0/user/projects": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List projects the current user belongs to",
        "responses": {
          "200": {
            "description": "Projects returned."
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/api/v0/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get current user info",
        "responses": {
          "200": {
            "description": "User info returned."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "User not found."
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update default inventory and city for current user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "defaultInventoryId",
                  "defaultCityId"
                ],
                "properties": {
                  "defaultInventoryId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "defaultCityId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Defaults updated."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/api/v0/user/whoami": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the current session user object.",
        "description": "Returns the session's user payload (id, email, name, image, role). Requires a signed‑in session. Response is wrapped in '{' data '}'.",
        "responses": {
          "200": {
            "description": "User wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "image": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not signed in."
          }
        }
      }
    },
    "/api/v0/waste-composition": {
      "get": {
        "tags": [
          "Waste Composition"
        ],
        "summary": "Get waste composition formula inputs for an inventory and methodology.",
        "description": "Returns formula input values (WCF_*) used by waste composition calculations for the specified methodology, using the inventory's city country LOCODE when available. Requires a signed‑in session with access to the inventory. Response is wrapped in data object.",
        "parameters": [
          {
            "in": "query",
            "name": "inventoryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "methodologyName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Formula inputs wrapped in data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameterCode": {
                            "type": "string"
                          },
                          "parameterName": {
                            "type": "string"
                          },
                          "gpcRefno": {
                            "type": "string"
                          },
                          "formulaInputValue": {
                            "type": "number"
                          },
                          "formulaInputUnits": {
                            "type": "string"
                          },
                          "formulaName": {
                            "type": "string"
                          },
                          "region": {
                            "type": "string"
                          },
                          "actorId": {
                            "type": "string"
                          },
                          "datasource": {
                            "type": "string"
                          },
                          "rnk": {
                            "type": "integer"
                          },
                          "methodologyName": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing inventoryId or methodologyName."
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/api/v0/city/{city}/ghgi": {
      "get": {
        "tags": [
          "GHG Inventory"
        ],
        "summary": "Get GHG inventory data for a city",
        "description": "Retrieves greenhouse gas inventory data for a specified city. The city parameter can be a UUID or \"default\" to use the user's default city.",
        "parameters": [
          {
            "in": "path",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "City ID (UUID) or \"default\" to use user's default city"
          }
        ],
        "responses": {
          "200": {
            "description": "GHG inventory data with total emissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "Inventory data with calculated total emissions"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid city ID or 'null' city parameter"
          },
          "404": {
            "description": "User has no default city or inventory not found"
          }
        }
      }
    }
  },
  "tags": []
}