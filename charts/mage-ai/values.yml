# Default values for mageai.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
standaloneScheduler: false

# Effective if standaloneScheduler is true
scheduler:
  replicaCount: 1
  name: mageai-scheduler


# Effective if standaloneScheduler is true
webServer:
  replicaCount: 1
  name: mageai-webserver

# Enable redis if you want more replica
redis:
  enabled: false
  architecture: standalone
  auth:
    enabled: false
  # Your custom redis url (make sure redis.enabled is set to false)
  customRedisURL: ""

image:
  repository: ghcr.io/open-earth-foundation/citycatalyst-mage-ai
  pullPolicy: Always
  tag: latest

imagePullSecrets: []
nameOverride: "mageai"
fullnameOverride: "mageai"

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "mageai"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 6789
  # Annotations to add to the service
  annotations: {}

# Configure extra options for containers' liveness probes
# If not configured, the probe is enabled using the following values
livenessProbe:
  enabled: true
  path: /api/status
  port: http
  initialDelaySeconds: 5
  # failureThreshold:
  # periodSeconds:
  # successThreshold:
  # terminationGracePeriodSeconds:
  timeoutSeconds: 10

# Configure extra options for containers' readiness probes
# If not configured, the probe is enabled using the following values
readinessProbe:
  enabled: true
  path: /api/status
  port: http
  initialDelaySeconds: 5
  # failureThreshold:
  # periodSeconds:
  # successThreshold:
  # terminationGracePeriodSeconds:
  timeoutSeconds: 1

# Custom liveness probe
customLivenessProbe: {}

# Custom readiness probe
customReadinessProbe: {}

# We recommend creating the ingress separately instead of creating it using this chart.
# There is a corresponding Mage-Ingress chart to create an ingress for Mage if needed.
# This section is kept here for backwards compatibility.
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# extraVolumeMounts:
#   - name: mage-fs
#     mountPath: /home/src

extraVolumes:
  - name: mage-fs
    persistentVolumeClaim:
      claimName: mage-fs-pvc

# config: Default configuration for mageai as environment variables. These get injected directly in the container.
config: {}

# existingSecret: Specifies an existing secret to be used as environment variables. These get injected directly in the container.
existingSecret: ""

# secrets: Default secrets for mageai as environment variables. These get injected directly in the container.
# Consider using a secret manager first, before sourcing secrets as environment variables.
secrets: {}

# extraEnvs: Extra environment variables
extraEnvs:
  - name: KUBE_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace