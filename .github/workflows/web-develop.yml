name: Push Web app to GHCR and deploy to EKS

permissions:
  contents: read
  packages: write
  checks: write

on:
  workflow_dispatch:
  push:
    branches: ["develop"]
    paths:
      - app/**
      - k8s/cc-migrate.yml
      - k8s/cc-web-deploy.yml
      - k8s/cc-web.yml
      - .github/workflows/web-develop.yml
  pull_request:
    paths:
      - app/**
      - k8s/cc-migrate.yml
      - k8s/cc-web-deploy.yml
      - k8s/cc-web.yml
      - .github/workflows/web-develop.yml

jobs:
  runTests:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      NEXTAUTH_SECRET: "diTMz/XLX4edSmmfzwJtmzKjCJGRt81Gf0PdjO3IPs8="
      NEXTAUTH_URL: "http://localhost:3000"
      CDP_API_KEY: ${{ secrets.CDP_API_KEY_TEST }}
      CDP_MODE: "test"
      NEXT_PUBLIC_FEATURE_FLAGS: "ENTERPRISE_MODE,ACCOUNT_SETTINGS_ENABLED,OAUTH_ENABLED,JN_ENABLED"
    defaults:
      run:
        working-directory: ./app
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Set up database
        env:
          GLOBAL_API_URL: https://ccglobal.openearth.dev
        run: |
          docker run --name github_action_postgresql -d -p 5432:5432 -e POSTGRES_HOST_AUTH_METHOD=trust -e POSTGRES_PASSWORD="" postgres
          sleep 10
          createuser -w -h localhost -p 5432 -U postgres citycatalyst
          createdb -w -h localhost -p 5432 -U postgres citycatalyst -O citycatalyst
          cp env.example .env
          npm run db:migrate
          npm run db:seed
          npm run sync-catalogue
          npm run sync-emissions-factors

      - uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Setup Environment Variables
        run: |
          echo "NEXT_PUBLIC_API_URL=https://citycatalyst.openearth.dev" >> .env && \
          echo "NEXT_PUBLIC_OPENCLIMATE_API_URL=https://openclimate.openearth.dev" >> .env && \
          echo "NEXT_PUBLIC_FEATURE_FLAGS=ENTERPRISE_MODE,ACCOUNT_SETTINGS_ENABLED,OAUTH_ENABLED,ANALYTICS_ENABLED,JN_ENABLED" >> .env && \
          echo "NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}" >> .env && \
          echo "NEXT_PUBLIC_POSTHOG_HOST=https://eu.i.posthog.com" >> .env

      - name: Run NextJS build
        run: npm run build

      # - name: Run Cypress tests
      #   run: npm run cy:test

      - name: Run tests and generate coverage file
        run: npm run api:test

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload coverage reports to Codecov
        continue-on-error: true
        uses: codecov/codecov-action@v4.0.1
        with:
          fail_ci_if_error: false
          flags: unittests
          name: citycatalyst-backend
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Open-Earth-Foundation/CityCatalyst

      - name: Shut down database
        run: docker stop github_action_postgresql

  pushToGHCR:
    needs: runTests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push full image
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64
          context: ./app
          target: full-build
          push: true
          tags: |
            ghcr.io/open-earth-foundation/citycatalyst:${{ github.sha }}
            ghcr.io/open-earth-foundation/citycatalyst:latest
          build-args: |
            NEXT_PUBLIC_API_URL=https://citycatalyst.openearth.dev
            NEXT_PUBLIC_OPENCLIMATE_API_URL=https://openclimate.openearth.dev
          cache-from: |
            type=gha,scope=citycatalyst-shared
            type=gha,scope=${{ github.ref_name }}
            type=gha,scope=main
            type=gha,scope=develop
          cache-to: type=gha,mode=max,scope=citycatalyst-shared

      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64
          context: ./app
          target: release
          push: true
          tags: |
            ghcr.io/open-earth-foundation/citycatalyst-web:${{ github.sha }}
            ghcr.io/open-earth-foundation/citycatalyst-web:latest
          build-args: |
            NEXT_PUBLIC_API_URL=https://citycatalyst.openearth.dev
            NEXT_PUBLIC_OPENCLIMATE_API_URL=https://openclimate.openearth.dev
          cache-from: |
            type=gha,scope=citycatalyst-shared
            type=gha,scope=${{ github.ref_name }}
            type=gha,scope=main
            type=gha,scope=develop
          cache-to: type=gha,mode=max,scope=citycatalyst-shared

  deployToEKS:
    needs: pushToGHCR
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_EKS_DEV_USER }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_EKS_DEV_USER }}
      EKS_DEV_NAME: ${{ secrets.EKS_DEV_NAME }}
    steps:
      - uses: actions/checkout@v4

      - name: Creating kubeconfig file
        run: aws eks update-kubeconfig --name ${{secrets.EKS_DEV_NAME}} --region us-east-1

      - name: Testing connection to EKS
        run: kubectl get pods -n default

      - name: Running migration job
        id: run_migrations
        run: |
          RUN_ID="${{ github.run_id }}-${{ github.run_attempt }}"

          echo "=========================================="
          echo "Database Migration"
          echo "=========================================="

          # Create a unique label for this migration run
          RUN_ID="${{ github.run_id }}-${{ github.run_attempt }}"

          # Create the migration job with temporary file (to add label)
          echo "Creating migration job with tracking label..."
          kubectl create -f k8s/cc-migrate.yml -n default --dry-run=client -o yaml | \
            kubectl label -f - --local=true migration-run=$RUN_ID -o yaml | \
            kubectl create -f -

          # Wait a moment for job to be created
          sleep 2

          # Find job using our unique label
          JOB_NAME=$(kubectl get jobs -n default \
            -l migration-run=$RUN_ID \
            -o jsonpath='{.items[0].metadata.name}')

          if [ -z "$JOB_NAME" ]; then
            echo "Failed to find migration job with label migration-run=$RUN_ID"
            echo "Attempting fallback: finding most recent cc-migrate job..."
            
            # Fallback: get most recent job starting with cc-migrate
            JOB_NAME=$(kubectl get jobs -n default \
              --sort-by=.metadata.creationTimestamp \
              -o json | \
              jq -r '.items[] | select(.metadata.name | startswith("cc-migrate-")) | .metadata.name' | \
              tail -1)
          fi

          if [ -z "$JOB_NAME" ]; then
            echo "Could not find migration job"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "Migration job created: $JOB_NAME"
          echo "job_name=$JOB_NAME" >> $GITHUB_OUTPUT

          # Wait for job to complete (10 minute timeout)
          echo "Waiting for migration to complete (timeout: 10 minutes)..."
          echo "Started at: $(date)"

          if kubectl wait --for=condition=complete --timeout=600s job/$JOB_NAME -n default; then
            echo "=========================================="
            echo "Migration Completed Successfully"
            echo "=========================================="
            
            echo "status=success" >> $GITHUB_OUTPUT
            
            # Show recent migration output using job name directly
            echo "Recent migration output:"
            kubectl logs job/$JOB_NAME -n default --tail=30
            
          else
            echo "=========================================="
            echo "Migration Failed or Timed Out"
            echo "=========================================="
            
            echo "status=failed" >> $GITHUB_OUTPUT
            
            # Get job status
            echo "Job Status:"
            kubectl get job $JOB_NAME -n default -o wide
            
            echo ""
            echo "Pod Status:"
            kubectl get pods -n default -l job-name=$JOB_NAME -o wide
            
            # Check restart count from job status
            RESTART_COUNT=$(kubectl get job $JOB_NAME -n default -o jsonpath='{.status.failed}' 2>/dev/null || echo "0")
            echo "restart_count=$RESTART_COUNT" >> $GITHUB_OUTPUT
            echo "Job failure count: $RESTART_COUNT"
            
            # Get error logs using job name (cleaner than pod lookup)
            echo ""
            echo "Migration Error Logs:"
            echo "----------------------------------------"
            MIGRATION_LOGS=$(kubectl logs job/$JOB_NAME -n default --tail=200 2>&1 || echo "Unable to retrieve logs")
            
            # Extract key error (last few lines with errors)
            KEY_ERROR=$(echo "$MIGRATION_LOGS" | grep -iE "error|failed|exception" | tail -5 | head -3)
            
            # Fallback to last 3 lines if no error pattern found
            if [ -z "$KEY_ERROR" ]; then
              KEY_ERROR=$(echo "$MIGRATION_LOGS" | tail -3)
            fi
            
            echo "$KEY_ERROR"
            
            # Save for Slack notification
            {
              echo "error_logs<<EOF_MIGRATION_LOGS"
              echo "$KEY_ERROR"
              echo "EOF_MIGRATION_LOGS"
            } >> $GITHUB_OUTPUT
            
            exit 1
          fi
        continue-on-error: true

      - name: Notify Slack - Migration Failure
        if: always() && steps.run_migrations.outputs.status == 'failed'
        uses: ./.github/actions/slack-notify
        with:
          type: migration_failure
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          branch: ${{ github.ref_name }}
          commit-sha: ${{ github.sha }}
          commit-message: ${{ github.event.head_commit.message }}
          author: ${{ github.event.head_commit.author.name }}
          workflow-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          commit-url: ${{ github.event.repository.html_url }}/commit/${{ github.sha }}
          error-logs: ${{ steps.run_migrations.outputs.error_logs }}
          environment: development

      - name: Stop deployment if migration failed
        if: steps.run_migrations.outputs.status == 'failed'
        run: |
          echo "::error::Migration failed. Deployment cannot continue."
          exit 1

      - name: Deploying service
        if: steps.run_migrations.outputs.status == 'success'
        run: |
          kubectl create -f k8s/cc-seed.yml -n default
          kubectl apply -f k8s/cc-web-deploy.yml -n default
          kubectl set env deployment/cc-web-deploy \
            SMTP_USER=${{secrets.SMTP_USER}} \
            SMTP_PASSWORD=${{secrets.SMTP_PASSWORD}} \
            NEXTAUTH_SECRET=${{secrets.NEXTAUTH_SECRET}} \
            RESET_TOKEN_SECRET=${{secrets.RESET_TOKEN_SECRET}} \
            VERIFICATION_TOKEN_SECRET=${{secrets.VERIFICATION_TOKEN_SECRET}} \
            OPENAI_API_KEY=${{secrets.OPENAI_API_KEY_DEV}} \
            "OPENAI_ASSISTANT_ID=asst_saoKNCVqCX7adTMoLqPxPHvB" \
            HUGGINGFACE_API_KEY=${{secrets.HUGGINGFACE_API_KEY}} \
            "ADMIN_EMAILS=${{secrets.ADMIN_EMAILS}}" \
            "ADMIN_NAMES=${{secrets.ADMIN_NAMES}}" \
            "DEFAULT_ADMIN_EMAIL=${{secrets.DEFAULT_ADMIN_EMAIL}}" \
            "DEFAULT_ADMIN_PASSWORD=${{secrets.DEFAULT_ADMIN_PASSWORD}}" \
            "HOST=https://citycatalyst.openearth.dev" \
            "NEXTAUTH_URL=https://citycatalyst.openearth.dev" \
            "NEXT_PUBLIC_API_URL=https://citycatalyst.openearth.dev" \
            "GLOBAL_API_URL=https://ccglobal.openearth.dev" \
            "HIAP_API_URL=http://hiap-service-dev" \
            "NEXT_PUBLIC_OPENCLIMATE_API_URL=https://openclimate.openearth.dev" \
            "OPENCLIMATE_API_URL=https://openclimate.openearth.dev" \
            "NEXT_PUBLIC_FEATURE_FLAGS=ENTERPRISE_MODE,ACCOUNT_SETTINGS_ENABLED,OAUTH_ENABLED,ANALYTICS_ENABLED,JN_ENABLED" \
            "NEXT_PUBLIC_POSTHOG_KEY=${{secrets.NEXT_PUBLIC_POSTHOG_KEY}}" \
            "NEXT_PUBLIC_POSTHOG_HOST=https://eu.i.posthog.com" \
            "NEXT_PUBLIC_DEPLOYMENT_ENV=development" \
            "AWS_FILE_UPLOAD_S3_BUCKET_ID=citycatalyst-files" \
            "AWS_FILE_UPLOAD_REGION=us-east-1"\
            "AWS_REGION"=${{secrets.AWS_REGION}} \
            "AWS_ACCESS_KEY_ID"=${{secrets.AWS_ACCESS_KEY_ID}} \
            "AWS_SECRET_ACCESS_KEY"=${{secrets.AWS_SECRET_ACCESS_KEY}} \
            "AWS_S3_BUCKET_ID"=${{secrets.AWS_S3_BUCKET_ID}} \
            CDP_API_KEY=${{secrets.CDP_API_KEY_TEST}}
          kubectl apply -f k8s/cc-sync-catalogue.yml -n default # cronjob
          kubectl create -f k8s/cc-sync-catalogue-manual.yml -n default # on deployment
          # TODO this (running cronjob on deploy) doesn't work since it can't randomize names. Needs own randomness source
          # once it works cc-sync-catalogue-manual.yml can be removed
          # kubectl create job --from=cronjob/cc-sync-catalogue cc-sync-catalogue-manual -n default
          kubectl create -f k8s/cc-create-admin.yml -n default
          kubectl rollout restart deployment cc-web-deploy -n default
  notifyDeploymentFailure:
    needs: [runTests, pushToGHCR, deployToEKS]
    runs-on: ubuntu-latest
    if: |
      always() && 
      (needs.runTests.result == 'failure' || needs.pushToGHCR.result == 'failure' || needs.deployToEKS.result == 'failure') && 
      github.event_name == 'push' &&
      github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Determine which stage failed
        id: failed_stage
        run: |
          if [ "${{ needs.runTests.result }}" == "failure" ]; then
            echo "stage=Tests" >> $GITHUB_OUTPUT
          elif [ "${{ needs.pushToGHCR.result }}" == "failure" ]; then
            echo "stage=Docker Build" >> $GITHUB_OUTPUT
          elif [ "${{ needs.deployToEKS.result }}" == "failure" ]; then
            echo "stage=Deployment" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack - Deployment Failure
        uses: ./.github/actions/slack-notify
        with:
          type: deployment_failure
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          branch: ${{ github.ref_name }}
          commit-sha: ${{ github.sha }}
          commit-message: ${{ github.event.head_commit.message }}
          author: ${{ github.event.head_commit.author.name }}
          workflow-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          commit-url: ${{ github.event.repository.html_url }}/commit/${{ github.sha }}
          failed-stage: ${{ steps.failed_stage.outputs.stage }}
          environment: development
